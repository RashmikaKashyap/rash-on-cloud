#AWS Lambda- to calculate relevancy score
import json
import boto3
from sklearn.feature_extraction.text import TfidfVectorizer
import PyPDF2
import io
import urllib.parse

s3 = boto3.client('s3')

def lambda_handler(event, context):
    try:
        # Log the event for debugging
        print("Received event:", json.dumps(event))

        # Try getting values from direct input (manual test)
        bucket = event.get('bucket')
        resume_key = event.get('resume_key')
        job_description = event.get('job_description')

        # Fallback to S3 trigger if keys are not present directly
        if not bucket or not resume_key:
            record = event['Records'][0]
            bucket = record['s3']['bucket']['name']
            resume_key = urllib.parse.unquote_plus(record['s3']['object']['key'])

            # Provide a default or dummy job description
            job_description = "Proficient in Python, AWS services, Lambda functions, and cloud deployments."

        if not bucket or not resume_key or not job_description:
            return {
                'statusCode': 400,
                'body': json.dumps("Missing 'bucket', 'resume_key', or 'job_description'")
            }

        # Fetch the PDF file from S3
        response = s3.get_object(Bucket=bucket, Key=resume_key)
        pdf_stream = response['Body'].read()

        # Read PDF content
        pdf_file = io.BytesIO(pdf_stream)
        reader = PyPDF2.PdfReader(pdf_file)
        resume_text = ''
        for page in reader.pages:
            resume_text += page.extract_text() or ''

        if not resume_text.strip():
            raise Exception("Resume is empty or could not be read.")

        # TF-IDF and similarity score
        vectorizer = TfidfVectorizer(stop_words='english')
        tfidf_matrix = vectorizer.fit_transform([resume_text, job_description])
        cosine_similarity = (tfidf_matrix[0] @ tfidf_matrix[1].T).toarray().flatten()[0]

        match_score = round(float(cosine_similarity), 4)

        # Log the match score to CloudWatch
        print(f"Match Score: {match_score}")

        return {
            'statusCode': 200,
            'body': json.dumps({'match_score': match_score})
        }

    except Exception as e:
        print(f"Error: {str(e)}")  # Log the error too
        return {
            'statusCode': 500,
            'body': json.dumps(f"Error processing PDF: {str(e)}")
        }
